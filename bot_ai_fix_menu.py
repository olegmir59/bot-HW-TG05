import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters.command import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, BufferedInputFile, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiohttp import ClientSession  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ aiohttp
from config import TELEGRAM_TOKEN

# –ò–Ω—Å—Ç–∞–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞
BIKE_IMAGE_PATH = "bike.png"

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class RouteStates(StatesGroup):
    START_POINT = State()
    NEXT_POINT = State()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ —Å–ø–∏—Å–∫–∞ —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
start_point = None
route_points = []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
async def fetch_elevation(lat, lon):
    base_url = 'https://api.opentopodata.org/v1/srtm30m'
    params = {'locations': f'{lat},{lon}', 'interpolation': 'cubic'}
    async with ClientSession() as session:  # —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Å–µ—Å—Å–∏—é aiohttp
        async with session.get(base_url, params=params) as resp:
            data = await resp.json()
            return float(data['results'][0]['elevation'])

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
@dp.message(CommandStart())
async def greet_user(message: Message):
    await message.answer("""
–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥–∞—é —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Ä—à—Ä—É—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/menu - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä—à—Ä—É—Ç–æ–º
    """)

...

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
@dp.message(Command("menu"))
async def send_menu(message: Message):
    markup = ReplyKeyboardMarkup(keyboard=[
        [
            KeyboardButton(text="üö¥ –°—Ç–∞—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–∞"),
            KeyboardButton(text="‚ú® –°–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–∫–∞"),
            KeyboardButton(text="‚û°Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Ä—à—Ä—É—Ç–∞")
        ]
    ], resize_keyboard=True, one_time_keyboard=False, is_persistent=True)
    await message.answer("""
–ú–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä—à—Ä—É—Ç–æ–º:
üö¥ –°—Ç–∞—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–∞ - –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
‚ú® –°–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–∫–∞ - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞
‚û°Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Ä—à—Ä—É—Ç–∞ - –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
    """, reply_markup=markup)

...
# –ù–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞
@dp.message(F.text == "üö¥ –°—Ç–∞—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–∞")
async def start_route(message: Message, state: FSMContext):
    global start_point, route_points
    start_point = None
    route_points.clear()
    with open(BIKE_IMAGE_PATH, "rb") as bike_image:
        image_bytes = BufferedInputFile(bike_image.read(), filename=BIKE_IMAGE_PATH)
        await bot.send_photo(chat_id=message.chat.id, photo=image_bytes)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞ (–ø—Ä–∏–º–µ—Ä: 55.115923, 82.970700)")
    await state.set_state(RouteStates.START_POINT)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
@dp.message(RouteStates.START_POINT)
async def process_start_point(message: Message, state: FSMContext):
    try:
        lat, lon = map(float, message.text.split(','))
        height = await fetch_elevation(lat, lon)
        global start_point, route_points
        start_point = (lat, lon)
        route_points.clear()
        route_points.append((height, 0))  # –ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ —Å –≤—ã—Å–æ—Ç–æ–π –∏ –¥–µ–ª—å—Ç–æ–π 0
        await message.answer(f"""
–¢–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!
–®–∏—Ä–æ—Ç–∞: {lat}
–î–æ–ª–≥–æ—Ç–∞: {lon}
–í—ã—Å–æ—Ç–∞: {height:.2f} –º
–†–∞–∑–Ω–∏—Ü–∞ –≤—ã—Å–æ—Ç: 0 –º
        """)
        await state.clear()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
@dp.message(F.text == "‚ú® –°–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–∫–∞")
async def next_point(message: Message, state: FSMContext):
    if not start_point:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –∫–æ–º–∞–Ω–¥–æ–π üö¥ –°—Ç–∞—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–∞.")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞ (–ø—Ä–∏–º–µ—Ä: 55.115923, 82.970700)")
        await state.set_state(RouteStates.NEXT_POINT)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
@dp.message(RouteStates.NEXT_POINT)
async def process_next_point(message: Message, state: FSMContext):
    try:
        lat, lon = map(float, message.text.split(','))
        current_height = await fetch_elevation(lat, lon)
        first_height = route_points[0][0]
        delta_height = current_height - first_height
        route_points.append((current_height, delta_height))
        await message.answer(f"""
–í—ã—Å–æ—Ç–∞ —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏: {current_height:.2f} –º
–†–∞–∑–Ω–∏—Ü–∞ –≤—ã—Å–æ—Ç: {delta_height:.2f} –º
        """)
        await state.clear()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
@dp.message(F.text == "‚û°Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Ä—à—Ä—É—Ç–∞")
async def show_route_profile(message: Message):
    if not route_points:
        await message.answer("–ú–∞—Ä—à—Ä—É—Ç –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π üö¥ –°—Ç–∞—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–∞.")
    else:
        profile_text = "\n".join([
            f"{i + 1}. –í—ã—Å–æ—Ç–∞: {h:.2f} –º, –†–∞–∑–Ω–∏—Ü–∞ –≤—ã—Å–æ—Ç: {dh:.2f} –º" for i, (h, dh) in enumerate(route_points)
        ])
        await message.answer(f"–ü—Ä–æ—Ñ–∏–ª—å –º–∞—Ä—à—Ä—É—Ç–∞:\n{profile_text}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())