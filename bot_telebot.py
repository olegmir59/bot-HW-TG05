import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from io import BytesIO
import requests
from config import TELEGRAM_TOKEN


# –¢–æ–∫–µ–Ω –Ω–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞
BIKE_IMAGE_PATH = "bike.png"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
def fetch_elevation(lat, lon):
    base_url = 'https://api.opentopodata.org/v1/srtm30m'
    params = {'locations': f'{lat},{lon}', 'interpolation': 'cubic'}
    response = requests.get(base_url, params=params)
    data = response.json()
    return float(data['results'][0]['elevation'])


# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ —Å–ø–∏—Å–∫–∞ —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
start_point = None
route_points = []


# –ö–æ–º–∞–Ω–¥–∞ "/start" –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@bot.message_handler(commands=['start'])
def greet_user(message):
    bot.send_message(message.chat.id, """
–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥–∞—é —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Ä—à—Ä—É—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/menu - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä—à—Ä—É—Ç–æ–º
    """)


# –ö–æ–º–∞–Ω–¥–∞ "/menu" –≤—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é
@bot.message_handler(commands=['menu'])
def send_menu(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button_start_route = KeyboardButton("üö¥ –°—Ç–∞—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–∞")
    button_next_point = KeyboardButton("‚ú® –°–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–∫–∞")
    button_show_profile = KeyboardButton("‚û°Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Ä—à—Ä—É—Ç–∞")
    markup.add(button_start_route, button_next_point, button_show_profile)
    bot.send_message(message.chat.id, """
–ú–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä—à—Ä—É—Ç–æ–º:
üö¥ –°—Ç–∞—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–∞ - –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
‚ú® –°–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–∫–∞ - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞
‚û°Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Ä—à—Ä—É—Ç–∞ - –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
    """, reply_markup=markup)


# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    global start_point, route_points
    if message.text == "üö¥ –°—Ç–∞—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–∞":
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        with open(BIKE_IMAGE_PATH, "rb") as bike_image:
            bot.send_photo(message.chat.id, bike_image)
        msg = bot.reply_to(message,
                          "–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞ (–ø—Ä–∏–º–µ—Ä: 55.115923, 82.970700)")
        bot.register_next_step_handler(msg, process_start_point)

    elif message.text == "‚ú® –°–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–∫–∞":
        if not start_point:
            bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –∫–æ–º–∞–Ω–¥–æ–π üö¥ –°—Ç–∞—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–∞.")
        else:
            msg = bot.reply_to(message,
                              "–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞ (–ø—Ä–∏–º–µ—Ä: 55.115923, 82.970700)")
            bot.register_next_step_handler(msg, process_next_point)

    elif message.text == "‚û°Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Ä—à—Ä—É—Ç–∞":
        show_route_profile(message)


def process_start_point(message):
    try:
        lat, lon = map(float, message.text.split(','))
        height = fetch_elevation(lat, lon)
        global start_point

        start_point = (lat, lon)
        route_points.clear()
        route_points.append((height, 0))  # –ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ —Å –≤—ã—Å–æ—Ç–æ–π –∏ –¥–µ–ª—å—Ç–æ–π 0
        bot.reply_to(message,
                    f"–¢–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n–®–∏—Ä–æ—Ç–∞: {lat}, –î–æ–ª–≥–æ—Ç–∞: {lon}\n–í—ã—Å–æ—Ç–∞: {height:.2f} –º\n–†–∞–∑–Ω–∏—Ü–∞ –≤—ã—Å–æ—Ç: 0 –º")
    except Exception as e:
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def process_next_point(message):
    try:
        lat, lon = map(float, message.text.split(','))
        current_height = fetch_elevation(lat, lon)
        first_height = route_points[0][0]
        delta_height = current_height - first_height
        route_points.append((current_height, delta_height))
        bot.reply_to(message, f"–í—ã—Å–æ—Ç–∞ —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏: {current_height:.2f} –º\n–†–∞–∑–Ω–∏—Ü–∞ –≤—ã—Å–æ—Ç: {delta_height:.2f} –º")
    except Exception as e:
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def show_route_profile(message):
    profile_text = "\n".join(
        [f"{i + 1}. –í—ã—Å–æ—Ç–∞: {h:.2f} –º, –†–∞–∑–Ω–∏—Ü–∞ –≤—ã—Å–æ—Ç: {dh:.2f} –º" for i, (h, dh) in enumerate(route_points)])
    bot.reply_to(message, f"–ü—Ä–æ—Ñ–∏–ª—å –º–∞—Ä—à—Ä—É—Ç–∞:\n{profile_text}")


if __name__ == "__main__":
    print("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)